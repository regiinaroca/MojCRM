@using GridMvc.Html
@using System.Web.UI.WebControls

@model IEnumerable<MojCRM.Models.Delivery>

@{
    ViewBag.Title = "Dostava eRačuna";
    Layout = "~/Views/Shared/_UserLayout.cshtml";
}

<body>
    <h2 style="text-align:center"><strong>Pregled dokumenata za dostavu</strong></h2>

    <hr />
    <div>
        <div class="row" style="text-align:center">
            <div class="col-md-12">
                <a href="@Url.Action("CreateTickets", "Delivery")" class="btn btn-primary btn-sm">
                    Kreiranje kartica za dostavu
                </a>
                <a href="@Url.Action("UpdateAllStatuses", "Delivery")" class="btn btn-warning btn-sm">
                    Provjeri sve statuse
                </a>
                <a id="remove-all" action="@Url.Action("RemoveAll", "Delivery")" method="post">
                    <input type="button" class="btn btn-danger btn-sm" onclick="javascript: RemoveAll()" value="Ukloni sve račune" />
                </a>
            </div>
        </div>
    </div>
    <hr />

    @{
        var documentTypeList = new List<ListItem>
        {
            new ListItem {Text = "Odaberi tip dokumenra", Value = null },
            new ListItem {Text = "eDokument", Value = "0" },
            new ListItem {Text = "eRačun", Value = "1" },
            new ListItem {Text = "Storno", Value = "3" },
            new ListItem {Text = "eOpomena", Value = "4" },
            new ListItem {Text = "eOdgovor", Value = "7" },
            new ListItem {Text = "eNarudžba", Value = "105" },
            new ListItem {Text = "eOpoziv", Value = "226" },
            new ListItem {Text = "eIzmjena", Value = "230" },
            new ListItem {Text = "eOdgovorN", Value = "231" },
            new ListItem {Text = "eOtpremnica", Value = "351" },
            new ListItem {Text = "eOdobrenje", Value = "381" },
            new ListItem {Text = "eTerećenje", Value = "383" },
        };
    }

    @using (Html.BeginForm("Index", "Delivery", FormMethod.Get))
    {
        <div class="row">
            <div class="col-md-4">
                <div class="form-group">
                    <label for="sender-search">Naziv pošiljatelja</label>
                    <div id="sender-search">
                        @Html.TextBox("Sender", ViewBag.CurrentFilter as string, new { @class = "form-control", @placeholder = "Naziv pošiljatelja" })
                    </div>
                </div>
            </div>
            <div class="col-md-4">
                <div class="form-group">
                    <label for="receiver-search">Naziv primatelja</label>
                    <div id="receiver-search">
                        @Html.TextBox("Receiver", ViewBag.CurrentFilter as string, new { @class = "form-control", @placeholder = "Naziv primatelja" })
                    </div>
                </div>
            </div>
            <div class="col-md-4">
                <div class="form-group">
                    <label for="invoice-number-search">Interni broj</label>
                    <div id="invoice-number-search">
                        @Html.TextBox("InvoiceNumber", ViewBag.CurrentFilter as string, new { @class = "form-control", @placeholder = "Interni broj" })
                    </div>
                </div>
            </div>
            <div class="col-md-4">
                <div class="form-group">
                    <label for="sent-date-search">Datum slanja dokumenta</label>
                    <div>
                        @Html.TextBox("SentDate", ViewBag.CurrentFilter as string, new { @class = "date-picker form-control", @placeholder = "Datum slanja dokumenta", @type = "text", @id = "sent-date-search", @name = "sent-date-search" })
                    </div>
                </div>
            </div>
            <div class="col-md-4">
                <div class="form-group">
                    <label for="ticket-date-search">Datum kreiranja kartice</label>
                    <div>
                        @Html.TextBox("TicketDate", ViewBag.CurrentFilter as string, new { @class = "date-picker form-control", @placeholder = "Datum kreiranja kartice", @type = "text", @id = "ticket-date-search", @name = "ticket-date-search" })
                    </div>
                </div>
            </div>
            @*<div class="col-md-4">
                    <div class="form-group">
                        <label for="document-type-search">Tip dokumenta</label>
                        <div>
                            @Html.DropDownList("DocumentType", new SelectList(documentTypeList, "Value", "Text"), null, new { @class = "btn btn-default dropdown-toggle", @type = "text", @id = "document-type-search", @name = "document-type-search" })
                        </div>
                    </div>
                </div>*@
        </div>

        <div class="row">
            <div class="col-md-2">
                <div class="form-group">
                    <button id="Search" type="submit" class="btn btn-primary btn-sm">Traži!</button>
                    <button id="ResetSearch" type="reset" class="btn btn-warning btn-sm">Poništi!</button>
                </div>
            </div>
            <div class="col-md-4">
                <div class="alert alert-info">
                    Broj trenutno otvorenih kartica: <strong>@ViewBag.OpenTickets</strong>
                </div>
            </div>
            <div class="col-md-4">
                <div class="alert alert-info">
                    Broj rezultata pretrage: <strong>@ViewBag.SearchResults</strong>
                </div>
            </div>
            <div class="col-md-2">

            </div>
        </div>
    }
    <hr />
    @Html.Grid(Model).Named("PopisRačunaZaDostavu").SetLanguage("hr").EmptyText("Nema rezultata").Columns(columns =>
{
columns.Add().Encoded(false).Sanitized(false).RenderValueAs(o => Html.CheckBox("checked", false, new { o.MerElectronicId, @class = "checked", @id = "checkbox", @idValue = o.MerElectronicId }));
columns.Add(m => m.Sender.SubjectName).Encoded(false).Sanitized(false).Titled("Pošijatelj").RenderValueAs(m => m.Sender.SubjectName + " (" + m.Sender.VAT + ") - " + m.Sender.SubjectBusinessUnit).Sortable(true);
columns.Add(m => m.Receiver.SubjectName).Encoded(false).Sanitized(false).Titled("Primatelj").RenderValueAs(m => m.Receiver.SubjectName + " (" + m.Receiver.VAT + ") - " + m.Receiver.SubjectBusinessUnit).Sortable(true);
columns.Add(m => m.InvoiceNumber).Encoded(false).Sanitized(false).Titled("Interni broj dokumenta").Sortable(false);
columns.Add(m => m.SentDate).Encoded(false).Sanitized(false).Titled("Datum slanja dokumenta").Sortable(true).Format("{0:dd.MM.yyyy}");
columns.Add(m => m.MerDocumentTypeIdString).Encoded(false).Sanitized(false).Titled("Tip dokumenta").Sortable(true);
columns.Add(m => m.InsertDate).Encoded(false).Sanitized(false).Titled("Datum kreiranja kartice").Sortable(true).Format("{0:dd.MM.yyyy}");
columns.Add().Encoded(false).Sanitized(false).RenderValueAs(m =>
{
    if (m.DocumentStatus == 30)
        return @<span>
        <a href="@Url.RouteUrl(new { action = "Details", controller = "Delivery", area = "", m.Id, m.ReceiverId, returnUrl = Request.Url })"><i class="glyphicon glyphicon-edit"></i></a>
        <a href="@Url.RouteUrl(new { action = "UpdateStatus", controller = "Delivery", area = "", m.Id, returnUrl = Request.Url })"><i style="color: forestgreen" class="glyphicon glyphicon-refresh"></i></a>
        <a href="@Url.RouteUrl(new { action = "Resend", controller = "Delivery", area = "", m.MerElectronicId, User.Identity.Name, returnUrl = Request.Url })"><i style="color: gold" class="glyphicon glyphicon-share-alt"></i></a>
        @*<a data-mer-id="@Html.Raw(m.MerElectronicId)" href="#" class="resend-document-ajax"><i style="color: gold" class="glyphicon glyphicon-share-alt"></i></a>*@
        <a data-mer-id="@Html.Raw(m.MerElectronicId)" href="#" class="remove-from-list-ajax"><i style="color: red" class="glyphicon glyphicon-remove"></i></a>
    </span>;

    return @<span>
        <a href="@Url.RouteUrl(new { action = "Details", controller = "Delivery", area = "", m.Id, returnUrl = Request.Url })"><i class="glyphicon glyphicon-edit"></i></a>
    </span>;
});
}).WithPaging(20)
</body>







<script>
    function RemoveFromList() {
        $(document).on("click", "a.remove-from-list-ajax", function (e) {
            e.preventDefault();
            if (window.confirm("Jeste li sigurni da želite ukloniti ovaj dokument iz popisa za dostavu?"))
                $.ajax({
                    method: 'POST',
                    url: '@Url.RouteUrl(new { action = "Remove", controller = "Delivery", area = "" })',
                    data: {
                        MerElectronicId: $(this).data("mer-id")
                    },
                    success: function (data) {
                        if (data.Status === 'OK')
                            alert("Uspješno ste uklonili dokument iz popisa za dostavu!");
                        else
                            alert("Greška!");
                    },
                    dataType: 'json'
                });
        });
    }

    function Resend() {
            $(document).on("click", "a.resend-document-ajax", function (e) {
        e.preventDefault();
        if (window.confirm("Ponovo pošalji obavijest o ovom dokumentu?"))
            $.ajax({
                method: 'POST',
                url: '@Url.RouteUrl(new { action = "Resend", controller = "Delivery", area = ""})',
                data: {
                    Id: $(this).data("mer-id"),
                    Agent: $(this).data("@User.Identity.Name")
                },
                success: function (data) {
//                    console.log(data.Status);
                    if (data.Status === 'OK')
                        alert("Poruka je ponovno poslana!");
                    else
                        alert("Greška!");
                },
                dataType: 'json'
            });
    });
    }
</script>
<script>
    function RemoveAll () {
        $(document).on("click", "#remove-all", function (e) {
            e.preventDefault();
            var selectedItems = $('input.checked:checked').map(function () { return $(this).attr('idValue'); })
            if (window.confirm("Jeste li sigurni da želite ukloniti označene dokumente iz popisa za dostavu?"))
                $.ajax({
                    method: 'POST',
                    url: '@Url.RouteUrl(new { action = "RemoveAll", controller = "Delivery", area = "" })',
                    data: {
                        MerElectronicIds: selectedItems
                    },
                    success: function (data) {
                        if (data.Status === 'OK')
                            alert("Uspješno ste uklonili dokumente iz popisa za dostavu!");
                        else
                            alert("Greška!");
                    },
                    dataType: 'json'
                });
        });
    }
</script>
<script>
    $(function () {
        $(".date-picker").datepicker({
            language: 'hr',
            weekStart: 1,
            format: "dd.mm.yyyy.",
            autoclose: true,
            orientation: "auto bottom",
        });
    })
</script>
